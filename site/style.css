/* * Variables */

/* Variable is useful for calling to inside the media query later */
:root {
    --gutter-width: 20vw;
    --default-title-size: 2.5em;
    --default-spacing-unit: 10px;
}

/* * Colour schemes */

:root {
    /* Enable light/dark mode */
    color-scheme: light dark;
    --fg-color: light-dark(black, #fbfbfe);
    --bg-color: light-dark(white, #1c1b22);
    --attention-color: light-dark(bisque, midnightblue);
}

@media (prefers-color-scheme: dark) {
    img {
        opacity: .75;
    }
}

html {
    background-color: var(--bg-color);
    color: var(--fg-color);
}


/* * Structure & page Layout */

* {
    /* https://www.w3schools.com/html/html_responsive.asp */
    box-sizing: border-box;
}

html {
    /* height: 100% ensures we fill the viewport, makes the footer stay at
   the bottom of the viewport. This is imnportant! */
    height: 100%;
    font-size: 14pt;
    font-family: georgia, serif, sans-serif;
    hyphens: auto;
}

body {
    /*   */
    display: grid;
     /* Semantic naming for calculations below. We subtract the gap
       width from the gutter width, so that the actual width of the
       rendered gutter spaces is the same as the --gutter-width var
       above (even with grid gaps). */
    --gap-width: var(--default-spacing-unit);
    --calculated-gutter-width: calc(var(--gutter-width) - var(--gap-width));
    /* 3x3 structure. A left rail, main column and right rail; within the
       main column a header area, content area, and then a footer area. */
    grid-template-columns:
        [left-gutter-start] var(--calculated-gutter-width)
        [left-gutter-end main-start] auto
        [main-end right-gutter-start] var(--calculated-gutter-width);
    grid-column-gap: var(--gap-width);
    grid-template-rows: [header-start] auto
                        [header-end main-start] 1fr
                        [main-end footer-start] auto [footer-end];
    min-height: 100%;
}

/* Fix for minor scrolling issue */
html, body {
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
}

/* ** Header */
header {
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
    margin-top: 40px;
    margin-bottom: 40px
}

/* ** Main area  */
main {
    grid-area: main;
}

/* Set everything in the body to be in the main area, and then other
   rules can override this if need be. */
body > * {
  grid-column: main;
}

/* ** Footer */

footer {
    grid-row: footer;
    margin-top: var(--default-spacing-unit);
    margin-bottom: var(--default-spacing-unit);
    /* Positioning */
    justify-self: center;
    font-size: 75%;
    text-align: center;
    hyphens: none;
    width: 40%;
}

/* * General styling */

h2 {
    font-size: large;
}

p {
    text-align: justify;
    /* This seems to work the best */
    text-justify: initial;
    margin: 0px;
}

p, li {
    /* All paragraphs which are preceded by another paragraph. */
    &:has(+ p, + li) {
	margin-bottom: 1.2ex;
    }
}

a {
    /* Ensure they're still blue after clicking */
    color: light-dark(blue,lightskyblue);
    text-decoration: none;
}

blockquote {
    font-style: italic;
    border-left: 3px solid;
    /* Space between content and border */
    padding-left: 0.5em;
    hyphens: none;
    margin: 5px;
    &.display {
	margin-left: 30px;
	margin-top: 20px;
	margin-bottom: 20px;
    }
}

.no-collapse-whitespace {
    white-space-collapse: preserve-breaks;
}

/*
   https://www.smashingmagazine.com/2020/03/setting-height-width-images-important-again/#how-css-interacts-with-element-widths-and-heights
   */
img {
    height: auto;
    width: auto;
}

/* Remove everything that makes it look like a button! Butchery of
   what buttons are supposed to be like, but hey, it looks nice. */
button {
    content: "";
    padding: 0;
    box-shadow: none;
    text-decoration: none;
    display: inline-block;
    background: none;
    border: none;
}

/* Class for bits of text which give information about other bits of
   text. (definitions titles, etc.) */
.decoration {
    display: inline-block;
    font-weight: bold;
    font-size: small;
    hyphens: none;
}

/* * Navigation */

/* On big screens, hide the checkbox and label used for the mobile
   menu */
.menu-toggle, input[type='checkbox'] {
    display: none;
}

/* These are 'about right' */
.title {
    font-size: var(--default-title-size);
}

.nav-bar {
    font-size: 1.5em;
}

.title, .nav-bar {
    display: inline;
}

.title, .nav-item {
    color: inherit;
}

.nav-item:hover, .current, nav.toc *:target-current {
    text-decoration-line: underline;
    text-decoration-thickness: 3px;
}

/* Align the nav items properly */
.nav-item:not(:last-child) {
    margin-right: 20px;
}

/* ** Table of contents */

/* Popover wrapper for navigation. On desktop, we just display
   contents. */
@media screen and (min-width: 900px) {
    #toc {
        display: contents;
        button[popovertarget="toc"] {
            display: none;
        }
    }
}

/* Desktop table of contents styling */
nav.toc {
    margin-top: 0;
    margin-bottom: 0;
    margin-left: var(--default-spacing-unit);
    margin-right: var(--default-spacing-unit);

    /* Scroll spy */
    scroll-target-group: auto;

    /* Positioning */
    grid-column: left-gutter;
    grid-row: main;
    position: sticky;
    top: 0;
    align-self: start;

    h2 {
        font-size: normal;
    }    

    ol {
        list-style-type: none;
        padding: 0;
    }
}

/* * Front page */
/*  Paragraph on the right */

.bio {
    margin-left: var(--default-spacing-unit);
    float: left;
    width: calc(50% - var(--default-spacing-unit));
 }

/* Picture on the left */
.portrait {
    margin-right: var(--default-spacing-unit);
    float: left;
    width: calc(50% - var(--default-spacing-unit));
}

/* * Research list */

dt.decoration {
    width: 40px;
}

dl {
    display: grid;
    grid-template-columns: auto auto 1fr;
    align-items: baseline;
    row-gap: 15px;
    column-gap: var(--default-spacing-unit);
}

dd {
    margin-right: 0px;
    margin-left: 0px;
}

/* ** Article list */

.article {
    grid-column: 1 / 4;
    display: grid;
    grid-template-columns: subgrid;
    align-items: baseline;
    dt {
        grid-column: 1 / 2;
    }
    .file-icon {
        fill: var(--fg-color);
        grid-column: 2 / 3;
        vertical-align: top;
        /* This is a magic number which corresponds pretty much exactly to the
           distance between the top of one line of text, and the baseline
           of the following line. */
        height: 4.5ex;
    }
    dd {
        grid-column: 3 / 4;
    }
}

/* *** Collapsible abstracts */

.abstract-label, .abstract-label:after {
    text-transform: uppercase;
    whitespace: preserve nowrap;
}

.abstract-label:hover {
    text-decoration-line: underline;
    text-decoration-thickness: 2px;
    cursor: pointer;
}

/* NOTE We 'should' use the :open pseudo class here, but it isn't as
   widely supported as the [open] attribute selector. The "/" in the
   content marks alternative text, read out by a screenreader --
   effectively hiding the arrows in that case.
*/
/* TODO Maybe this needs some more looking at? Do the abstract buttons
   need better support? */
details:not([open]) .abstract-label::after {
    content: " ▸" / " closed";
}

details[open] .abstract-label::after {
    content: " ▾" / " open";
}

.abstract {
    text-align: justify;
    /* On desktop the textblock is wide enough that small differences in
       tracking/kerning are not noticeable, so it's nice to just not
       have any hyphenated text. */
    hyphens: none;
}

/* ** Talk list */

/* Proper layout. Credit G-Cyrillius
   https://stackoverflow.com/q/79745022/14915848 */
dl.talk-list {
    /* We have phantom third column, which we don't use, so remove the
       spacing for that.*/
    column-gap: calc(0.5 * var(--default-spacing-unit));
    dt {
        grid-column: 1 / 2;
    }
    dd {
        grid-column: 3 / 4;
    }
}


/* * Teaching eval tables */

.bar {
    & tr {
	--labels-size: 300px;
    }

    & th {
	font-size: 80%;
	line-height: 0.9;
	text-align: left;
	font-weight: normal;
	hyphens: none;
    }

    & caption {
	font-style: italic;
    }

    /* table-leader is only visible on mobile, but I wanted it styled in
       the same way as the data labels, so that's declared here too.*/
    & .data, .table-leader {
	font-style: italic;
	padding-left: 3px;
	font-size: 90%
    }

    & .table-leader {
	text-align: left;
	/* Align the 'caption' leader with the labels */
	padding-left: 0pt;
    }

    & .data {
	font-style: italic;
    }

}

/* * Longer writing */

.footnotes::before, .toc > h2:after {
    /* There has to be some content, otherwise it doesn't display. */
    content:" ";
    display: block;
    height: 3px;
    width: 100%;
    background: var(--fg-color);
    margin-top: calc(2* var(--default-spacing-unit));
    margin-bottom: calc(2* var(--default-spacing-unit));
}

/* Dynamic footnote highlighting */
@keyframes fade-alert {
    0% {
	background-color: var(--attention-color);
    }
    100% {
	background-color: inherit;
    }
}

/* The :not ensures that we don't highlight the header when we scroll
   to the top-- semmed a bit much. */
:target:not(#header) {
    animation: fade-alert 3s;
}

/* Smooth scrolling! */
:root {
    scroll-behavior: smooth;
}


/* ** LaTeX logo */

/* https://tess.oconnor.cx/2007/08/tex-poshlet */
.latex-logo {
    sub, sup {
	text-transform: uppercase;
    }
    sup {
	font-size: 0.85em;
	vertical-align: 0.15em;
	margin-left: -0.36em;
	margin-right: -0.15em;
    }
    sub {
	vertical-align: -0.4ex;
	margin-left: -0.25em;
	margin-right: -0.125em;
    }
}

/* * Licensing */

/* Mostly taken from
   https://css-tricks.com/couple-takes-sticky-footer/#aa-there-is-flexbox
*/

.license {
    text-align: center;
}

.cc-image {
    height: 2.5ex;
    vertical-align: text-bottom;
    color: var(--fg-color);
}


/* * Contact and ORCID */

#orcid-id, .email {
    font-family: monospace;
    white-space: nowrap;
}

/* This is an attempt to conform to
   https://info.orcid.org/documentation/integration-guide/orcid-id-display-guidelines/#h-compact-orcid-id */
#orcid-logo {
    vertical-align: middle;
    height: 24px;
    width: px;
}

/* * 404 */

.warning-container {
    text-align: center;
    hyphens: none;
}

/* REALLY BIG */
#four-oh-four { font-size: 15em; }

/* * Responsive design */

/* ** Portrait */
@media screen and (max-width: 900px) and (orientation: portrait) {

    body {
        --gutter-width: 0;
        --gap-width: var(--default-spacing-unit);
        --calculated-gutter-width: calc(var(--gutter-width) - var(--gap-width));
        grid-template-columns:
            [left-gutter-start] var(--calculated-gutter-width)
            [left-gutter-end main-start] auto
            [main-end right-gutter-start] var(--calculated-gutter-width);
        grid-column-gap: var(--gap-width);
    }

    .portrait, .bio {
	width: 100%;
	/* Remove previous margins */
	margin: 0px;
    }

    .portrait {
	margin-bottom: var(--default-spacing-unit);
    }
}

/* ** Landscape */
@media screen and (max-height: 900px) and (orientation: landscape) {
    body {
        --gutter-width: 10%;
        --gap-width: var(--default-spacing-unit);
        --calculated-gutter-width: calc(var(--gutter-width) - var(--gap-width));
        /* In landscape mode, we use the grid which we inherit from the
           desktop setup to make two 'margines' (the alternative is
           not having a grid, and setting up a different layout here,
           which would only be more confusing) */
        grid-template-columns:
            [left-gutter-start] var(--calculated-gutter-width)
            [left-gutter-end main-start] auto
            [main-end right-gutter-start] var(--calculated-gutter-width);
        grid-column-gap: var(--gap-width);
    }

    /* README!! The following rules might look a bit odd, but they are
       correct The point is to fix it so that the portrait displays on
       the left, the bio on the right, and all such that the bio text
       wraps under the portrait if it's long enough (rather than
       continuing in a column). This is achieved by making the bio
       full-width, then floating the portrait inside the text of the
       bio, and the recalculating the values of the margins. */

    .portrait {
	margin-right: calc(2 * var(--default-spacing-unit));
        /* This looks weird in the code, but much better than a 'correct'
           margin when rendered. Go figure. */
	margin-bottom: 0;
    }
    
    .bio {
	margin-left: 0px;
	float: none;
	width: auto;
    }

}

/* ** General mobile things */
@media screen and (max-width: 900px) {

    /* (Show and) style the toggle switch */
    .menu-toggle {
	display: inline-block;
    }

    /* Hide nav-bar when checkbox not ticked */
    input[id='menu']:not(:checked)+.nav-bar {
	display: none;
    }

    /* Blue the background when the TOC popover is active. */
    ::backdrop {
        backdrop-filter: blur(2px);
    }
    
    /* Button within the TOC which closes it ('x' in the top right) */
    nav.toc button[popovertargetaction="hide"] {
        position: absolute;
        font-weight: bold;
        color: var(--fg-color);
        font-size: large;
        top: 0;
        right: 0;
    }

    /* Floating button which opens/closes TOC */
    button[id="toc-toggle"] {
        position: fixed;
        bottom: var(--default-spacing-unit);
        left: var(--default-spacing-unit);
        left: var(--default-spacing-unit);
        width: 60px;
        aspect-ratio: 1 / 1;

        /* The charts CSS interferes with this button (perhaps because it's an
           SVG?). The small labels for each bar were shoowing above
           it, so we adjust the z-index to stop that happening.) */
        z-index: 1;
    }

    /* The popover, when it's open */
    div[popover].toc {
        max-height: calc(100% - (2 * var(--default-spacing-unit)));
        max-width: calc(100% - (2 * var(--default-spacing-unit)));
        overflow: scroll;
    }

    .nav-item {
        /* Display vertically because mobile */
        display: block;
        width: 100%;
        text-align: right;
	/* We don't have to select just the ones which are followed by others,
	   because we also want to separate the top one from the
	   button above it. */
        margin-top: 1em;
	&:first-child {
	    margin-top: 0.5em;   
	}
    }

    header {
	margin-top: var(--default-spacing-unit);
	margin-bottom: var(--default-spacing-unit);
	/* Keep the .title-bar block above the list navigation list */
	display: block;
    }

    footer { width: 100%; }

    #four-oh-four { font-size: 30vw; }

    ul, ol {
	/* This 'properly' aligns the left edge of the list with the left
           margin. See discussion here:
           https://stackoverflow.com/a/678006/14915848 */
	padding-left: 0px;
        /* TODO This is a magic number in Firefox. Work out the fine tuning
           for other browsers... */
	margin-left: 17px;
    }

/* ** Research list  */

    dl {
        grid-template-columns: auto 1fr;
    }

    .article {
        grid-column: 1 / 3;
        display: grid;
        grid-template-columns: subgrid;
        grid-template-rows: auto 1fr;
        row-gap: 5px;
    }

    /* In the list of papers (but not the list of talks), the grid-row
       properties refer to a subgrid. In the list of talks, let them
       be set automatically. */
    .paper-list {
        & dt {
            grid-row: 1 / 2;
        }

        & a:has(.file-icon) {
            grid-row: 2 / 3;
        }

        & dd, .article-text {
            grid-row: 1 / 3;
        }
    }

    /* Year and PDF icon in the first column */
    dt, a:has(.file-icon) {
        grid-column: 1 / 2;
    }

    .abstract {
	text-align: justify;
	/* On mobile, the text block is small enough that the kerning/tracking
           differences introduced by hyphens: none; are too much, so
           we use hyphens here.*/
	hyphens: auto;
    }

/* ** Charts  */

    .bar {
	/* make the labels a reasonable size */
	& tr {
	    --labels-size: 150px;
	}

	/* Turn numbers around (and make them slightly smaller) */
	& .data {
	    font-size: 60%;
	    transform: rotate(90deg) !important;
	    transform-origin: bottom right;
	}	
    }


/* ** Burger Menu */

    .title-bar {
	position: relative;
    }

    /* Responsive sizing. Not perfect, but close enough */
    .title { font-size: min(var(--default-title-size), 10vw) ;}

    .menu-toggle {
        position: absolute;
	top: 0;
	bottom: 0;
	right: 0;
        aspect-ratio: 1 / 1;
    }

    .burgerbox {
        fill: var(--bg-color);
    }

    .burgerbar {
	fill: var(--fg-color);
    }

    @media (prefers-color-scheme: dark) {
        .menu-toggle, #toc-toggle {
            border: 3px solid var(--fg-color);
        }
    }

}
